import { useEffect, useState, useContext } from 'react'
import {
  Dialog,
  DialogBackdrop,
  DialogPanel,
  Disclosure,
  DisclosureButton,
  DisclosurePanel,
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
} from '@headlessui/react'
import { XMarkIcon } from '@heroicons/react/24/outline'
import { ChevronDownIcon, FunnelIcon, MinusIcon, PlusIcon, Squares2X2Icon } from '@heroicons/react/20/solid'
import { getAllProduct, getProductsByCategory } from '../../api/apiService'
import { ShopContext } from '../Context/ShopContext'
import { Link } from 'react-router-dom'
import '../PageProduct/ProductList.css'

function classNames(...classes) {
  return classes.filter(Boolean).join(' ')
}

const subCategories = [
  { name: 'Dog Food', href: '#' },
  { name: 'Cat Food', href: '#' },
  { name: 'Balo', href: '#' },
  { name: 'Toy', href: '#' },
  { name: 'Cat Shampoo', href: '#' },
  { name: 'Dog Shampoo', href: '#' },
]

const filters = [
  // Define your filters here
]

const sortOptions = [
  { name: 'Default Sorting', href: '#', current: true },
  { name: 'Sort By Price: High to Low', href: '#', current: false },
  { name: 'Sort By Price: Low to High', href: '#', current: false },
]

export default function ProductList() {
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false)
  const [productList, setProductList] = useState([])
  const [sortedProductList, setSortedProductList] = useState([])
  const { addToCart } = useContext(ShopContext) || { addToCart: () => {} }
  const [selectedCategories, setSelectedCategories] = useState([])
  const [sortTitle, setSortTitle] = useState('Sort Options')
  const [currentPage, setCurrentPage] = useState(1)
  const productsPerPage = 12
  const [dropdownOpen, setDropdownOpen] = useState(false)
  const [sortDropdownOpen, setSortDropdownOpen] = useState(false)

  useEffect(() => {
    const sortedList = [...productList]
    sortedList.sort((a, b) => a.price - b.price)
    sortDefault()
    setSortedProductList(sortedList)
  }, [productList])

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        let response
        if (selectedCategories.length === 0) {
          response = await getAllProduct()
        } else {
          const promises = selectedCategories.map((category) => getProductsByCategory({ category }))
          const categoryResponses = await Promise.all(promises)
          const products = categoryResponses.flatMap((response) => response)
          response = products
        }

        console.log('Fetched products:', response)
        setProductList(response)
      } catch (error) {
        console.error('Error fetching products:', error)
      }
    }
    fetchProducts()
  }, [selectedCategories])

  const sortAscending = () => {
    const sortedList = [...sortedProductList]
    sortedList.sort((a, b) => a.price - b.price)
    setSortedProductList(sortedList)
    setSortTitle('Sort By Price: Low to High')
    resetPagination()
  }

  const sortDescending = () => {
    const sortedList = [...sortedProductList]
    sortedList.sort((a, b) => b.price - a.price)
    setSortedProductList(sortedList)
    setSortTitle('Sort By Price: High to Low')
    resetPagination()
  }

  const sortDefault = () => {
    setSortedProductList([...productList])
    setSortTitle('Default Sorting')
    resetPagination()
  }

  const resetPagination = () => {
    setCurrentPage(1)
  }

  const indexOfLastProduct = currentPage * productsPerPage
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage
  const currentProducts = sortedProductList.slice(indexOfFirstProduct, indexOfLastProduct)

  const paginate = (pageNumber) => setCurrentPage(pageNumber)

  return (
    <div className="bg-white">
      <div>
        {/* Mobile filter dialog */}
        <Dialog open={mobileFiltersOpen} onClose={setMobileFiltersOpen} className="relative z-40 lg:hidden">
          <DialogBackdrop
            transition
            className="fixed inset-0 bg-black bg-opacity-25 transition-opacity duration-300 ease-linear data-[closed]:opacity-0"
          />

          <div className="fixed inset-0 z-40 flex">
            <DialogPanel
              transition
              className="relative ml-auto flex h-full w-full max-w-xs transform flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl transition duration-300 ease-in-out data-[closed]:translate-x-full"
            >
              <div className="flex items-center justify-between px-4">
                <h2 className="text-lg font-medium text-gray-900">Filters</h2>
                <button
                  type="button"
                  onClick={() => setMobileFiltersOpen(false)}
                  className="-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400"
                >
                  <span className="sr-only">Close menu</span>
                  <XMarkIcon aria-hidden="true" className="h-6 w-6" />
                </button>
              </div>

              {/* Filters */}
              <form className="mt-4 border-t border-gray-200">
                <h3 className="sr-only">Categories</h3>

                <ul role="list" className="px-2 py-3 font-medium text-gray-900">
                  {subCategories.map((category) => (
                    <li key={category.name}>
                      <a href={category.href} className="block px-2 py-3">
                        {category.name}
                      </a>
                    </li>
                  ))}
                </ul>

                {filters.map((section) => (
                  <Disclosure key={section.id} as="div" className="border-t border-gray-200 px-4 py-6">
                    <h3 className="-mx-2 -my-3 flow-root">
                      <DisclosureButton className="group flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500">
                        <span className="font-medium text-gray-900">{section.name}</span>
                        <span className="ml-6 flex items-center">
                          <PlusIcon aria-hidden="true" className="h-5 w-5 group-data-[open]:hidden" />
                          <MinusIcon aria-hidden="true" className="h-5 w-5 [.group:not([data-open])_&]:hidden" />
                        </span>
                      </DisclosureButton>
                    </h3>
                    <DisclosurePanel className="pt-6">
                      <div className="space-y-6">
                        {section.options.map((option, optionIdx) => (
                          <div key={option.value} className="flex items-center">
                            <input
                              defaultValue={option.value}
                              defaultChecked={option.checked}
                              id={`filter-mobile-${section.id}-${optionIdx}`}
                              name={`${section.id}[]`}
                              type="checkbox"
                              className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                            />
                            <label
                              htmlFor={`filter-mobile-${section.id}-${optionIdx}`}
                              className="ml-3 min-w-0 flex-1 text-gray-500"
                            >
                              {option.label}
                            </label>
                          </div>
                        ))}
                      </div>
                    </DisclosurePanel>
                  </Disclosure>
                ))}
              </form>
            </DialogPanel>
          </div>
        </Dialog>

        <main className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="flex items-baseline justify-between border-b border-gray-200 pb-6 pt-24">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900">New Arrivals</h1>

            <div className="flex items-center">
            <Menu as="div" className="relative inline-block text-left">
                
                <div>
                  <MenuButton className="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900">
                    Sort
                    <ChevronDownIcon
                      aria-hidden="true"
                      className="-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500"
                    />
                  </MenuButton>
                </div>

                <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none">
                  <ul className="absolute z-10 mt-1 w-full rounded-md bg-white py-1 text-base ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                    <li className="cursor-default select-none relative py-2 pl-3 pr-9" onClick={sortDefault}>
                      Default Sort
                    </li>
                    <li className="cursor-default select-none relative py-2 pl-3 pr-9" onClick={sortDescending}>
                      Sort By Price: High to Low
                    </li>
                    <li className="cursor-default select-none relative py-2 pl-3 pr-9" onClick={sortAscending}>
                      Sort By Price: Low to High
                    </li>
                  </ul>
                </MenuItems>
              </Menu>

              <button
                type="button"
                className="-m-2 ml-5 p-2 text-gray-400 hover:text-gray-500 lg:hidden"
                onClick={() => setMobileFiltersOpen(true)}
              >
                <span className="sr-only">Filters</span>
                <FunnelIcon className="h-5 w-5" aria-hidden="true" />
              </button>
            </div>
          </div>

          <section aria-labelledby="products-heading" className="pb-24 pt-6">
            <h2 id="products-heading" className="sr-only">
              Products
            </h2>

            <div className="grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4">
              {/* Filters */}
              <form className="hidden lg:block">
                <h3 className="sr-only">Categories</h3>
                <ul role="list" className="space-y-4 border-b border-gray-200 pb-6 text-sm font-medium text-gray-900">
                  {subCategories.map((category) => (
                    <li key={category.name}>
                      <a href={category.href}>{category.name}</a>
                    </li>
                  ))}
                </ul>

                {filters.map((section) => (
                  <Disclosure key={section.id} as="div" className="border-b border-gray-200 py-6">
                    {({ open }) => (
                      <>
                        <h3 className="-my-3 flow-root">
                          <DisclosureButton className="group flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500">
                            <span className="font-medium text-gray-900">{section.name}</span>
                            <span className="ml-6 flex items-center">
                              {open ? (
                                <MinusIcon className="h-5 w-5" aria-hidden="true" />
                              ) : (
                                <PlusIcon className="h-5 w-5" aria-hidden="true" />
                              )}
                            </span>
                          </DisclosureButton>
                        </h3>
                        <DisclosurePanel className="pt-6">
                          <div className="space-y-4">
                            {section.options.map((option, optionIdx) => (
                              <div key={option.value} className="flex items-center">
                                <input
                                  id={`filter-${section.id}-${optionIdx}`}
                                  name={`${section.id}[]`}
                                  defaultValue={option.value}
                                  defaultChecked={option.checked}
                                  type="checkbox"
                                  className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                                />
                                <label
                                  htmlFor={`filter-${section.id}-${optionIdx}`}
                                  className="ml-3 text-sm text-gray-600"
                                >
                                  {option.label}
                                </label>
                              </div>
                            ))}
                          </div>
                        </DisclosurePanel>
                      </>
                    )}
                  </Disclosure>
                ))}
              </form>

              {/* Product grid */}
              <div className="lg:col-span-3">
                <div className="bg-white">
                  <div className="pt-6">
                    <div className="mx-auto max-w-2xl px-2 pb-16 sm:px-6 lg:max-w-7xl lg:px-8">
                      <div className="mt-8 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8">
                      {currentProducts.length > 0 ? (
          currentProducts.map((product) => (
            <div key={product?.productId || 'unknown-product'} className="shadow-md rounded-lg overflow-hidden h-full flex flex-col w-full">
              <div className="relative pb-5/4">
                {product?.productName ? (
                  <Link to={`/productdisplay/${product.productName}`}>
                    <img
                      src={product.pictureName}
                      alt={product.productName}
                      className="w-full h-full object-cover"
                    />
                  </Link>
                ) : (
                  <div className="w-full h-full bg-gray-200" />
                )}
              </div>
              <div className="p-2 flex flex-col flex-grow justify-between">
                <div>
                  <h4 className="font-bold text-gray-800">{product?.productName || 'Unknown Product'}</h4>
                </div>
                <div className="flex justify-between items-center mt-3">
                  <span className="ordernow-text text-[#d13a3a] font-semibold group-hover:text-gray-800">${product?.price * 2 || 'N/A'}</span>
                  <button
                    className="btun4 lg:inline-flex items-center gap-3 group-hover:bg-white/10 bg-[#abd373] shadow-[10px_10px_150px_#ff9f0d] cursor-pointer py-2 px-4 text-sm font-semibold rounded-full butn h-6"
                    onClick={() => product?.productId && addToCart(product.productId, 1)}
                  >
                    Order Now
                  </button>
                </div>
              </div>
            </div>
          ))
          ) : (
          <div className="w-full flex justify-center items-center">
            <div className="w-64">
              <div className="animate-pulse">
                <div className="h-32 bg-gray-200 rounded-md"></div>
                <div className="mt-2 h-6 bg-gray-200 rounded-md"></div>
                <div className="mt-2 h-6 bg-gray-200 rounded-md"></div>
              </div>
            </div>
          </div>
        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex justify-center mt-8">
              {Array.from({ length: Math.ceil(sortedProductList.length / productsPerPage) }).map((_, index) => (
                <button
                  key={index}
                  className={`mx-1 px-3 py-1 rounded ${currentPage === index + 1 ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
                  onClick={() => paginate(index + 1)}
                >
                  {index + 1}
                </button>
              ))}
            </div>
          </section>
        </main>
      </div>
    </div>
  )
}
